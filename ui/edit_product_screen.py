from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
                             QLineEdit, QComboBox, QDoubleSpinBox, QPushButton, QLabel,
                             QMessageBox, QFrame, QSizePolicy)
from PyQt5.QtCore import Qt, pyqtSignal
from database.db_manager import DatabaseManager


class EditProductScreen(QWidget):
    product_updated = pyqtSignal()

    def __init__(self, product_data, partner_inn=None):
        super().__init__()
        self.partner_inn = partner_inn
        self.original_article = product_data['ArticleNumber']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.product_data = product_data
        self.db_manager = DatabaseManager()

        # –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ -> ID
        self.product_types = {
            "–õ–∞–º–∏–Ω–∞—Ç": "1",
            "–ú–∞—Å—Å–∏–≤–Ω–∞—è –¥–æ—Å–∫–∞": "2",
            "–ü–∞—Ä–∫–µ—Ç–Ω–∞—è –¥–æ—Å–∫–∞": "3",
            "–ü—Ä–æ–±–∫–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ": "4"
        }

        # –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: ID -> –Ω–∞–∑–≤–∞–Ω–∏–µ
        self.id_to_type = {v: k for k, v in self.product_types.items()}

        self.init_ui()
        self.load_product_data()

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = QFrame()
        header_frame.setObjectName("headerFrame")
        header_layout = QHBoxLayout()

        icon_label = QLabel("‚úèÔ∏è")
        icon_label.setObjectName("iconLabel")
        title_label = QLabel("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
        title_label.setObjectName("headerTitle")

        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_frame.setLayout(header_layout)

        main_layout.addWidget(header_frame)

        # –ö–æ–Ω—Ç–µ–Ω—Ç
        content_frame = QFrame()
        content_frame.setObjectName("contentFrame")
        content_layout = QVBoxLayout()

        form_title = QLabel("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
        form_title.setObjectName("formTitle")
        content_layout.addWidget(form_title)

        form_subtitle = QLabel("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
        form_subtitle.setObjectName("formSubtitle")
        content_layout.addWidget(form_subtitle)

        # –§–æ—Ä–º–∞
        form_layout = QFormLayout()
        form_layout.setVerticalSpacing(25)
        form_layout.setHorizontalSpacing(20)

        # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        self.product_name_edit = QLineEdit()
        self.product_name_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
        self.product_name_edit.setObjectName("inputField")
        self.product_name_edit.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ *", self.product_name_edit)

        # –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏ - ComboBox
        self.product_type_combo = QComboBox()
        self.product_type_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        for type_name, type_id in self.product_types.items():
            self.product_type_combo.addItem(f"{type_name} (ID: {type_id})", type_id)

        self.product_type_combo.setObjectName("inputField")
        self.product_type_combo.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        form_layout.addRow("–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏ *", self.product_type_combo)

        # –ê—Ä—Ç–∏–∫—É–ª
        self.article_edit = QLineEdit()
        self.article_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª")
        self.article_edit.setObjectName("inputField")
        self.article_edit.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        form_layout.addRow("–ê—Ä—Ç–∏–∫—É–ª *", self.article_edit)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        self.price_spin = QDoubleSpinBox()
        self.price_spin.setRange(0.00, 999999.99)
        self.price_spin.setDecimals(2)
        self.price_spin.setValue(0.00)
        self.price_spin.setSuffix(" ‚ÇΩ")
        self.price_spin.setObjectName("inputField")
        self.price_spin.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        form_layout.addRow("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å *", self.price_spin)

        content_layout.addLayout(form_layout)
        content_frame.setLayout(content_layout)
        main_layout.addWidget(content_frame)

        main_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()

        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.setObjectName("saveBtn")
        self.cancel_btn = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        self.cancel_btn.setObjectName("cancelBtn")

        buttons_layout.addWidget(self.save_btn)
        buttons_layout.addWidget(self.cancel_btn)

        main_layout.addLayout(buttons_layout)
        self.setLayout(main_layout)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.save_btn.clicked.connect(self.save_product)
        self.cancel_btn.clicked.connect(self.close)

    def load_product_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ñ–æ—Ä–º—É"""
        try:
            print("=== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–†–û–î–£–ö–¢–ê ===")
            print("product_data:", self.product_data)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            self.product_name_edit.setText(self.product_data.get('ProductName', ''))
            self.article_edit.setText(self.product_data.get('ArticleNumber', ''))

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ ComboBox
            product_type_id = str(self.product_data.get('ProductTypeID', ''))
            print("–ò—â–µ–º —Ç–∏–ø —Å ID:", product_type_id)

            # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ ComboBox –ø–æ ID
            for i in range(self.product_type_combo.count()):
                if self.product_type_combo.itemData(i) == product_type_id:
                    self.product_type_combo.setCurrentIndex(i)
                    print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø: {self.product_type_combo.itemText(i)}")
                    break

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É
            min_price = self.product_data.get('MinPartnerPrice', 0)
            if isinstance(min_price, str):
                try:
                    min_price = float(min_price.replace(',', '.'))
                except (ValueError, AttributeError):
                    min_price = 0.0

            self.price_spin.setValue(float(min_price))

            print("=== –î–ê–ù–ù–´–ï –ó–ê–ì–†–£–ñ–ï–ù–´ ===")

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def save_product(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"""
        if not self.validate_fields():
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ComboBox
            selected_type_id = self.product_type_combo.currentData()

            updated_data = {
                'ProductName': self.product_name_edit.text().strip(),
                'ProductTypeID': selected_type_id,
                'ArticleNumber': self.article_edit.text().strip(),
                'MinPartnerPrice': self.price_spin.value()
            }

            print("=== –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô ===")
            print("original_article:", self.original_article)
            print("updated_data:", updated_data)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ update_product –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if self.db_manager.update_product(self.original_article, updated_data):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                self.product_updated.emit()
                self.close()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")

        except Exception as e:
            print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e)
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

    def validate_fields(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã"""
        if not self.product_name_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
            self.product_name_edit.setFocus()
            return False

        if not self.product_type_combo.currentData():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
            self.product_type_combo.setFocus()
            return False

        if not self.article_edit.text().strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª")
            self.article_edit.setFocus()
            return False

        if self.price_spin.value() <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å")
            self.price_spin.setFocus()
            return False

        return True