from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
                             QComboBox, QSpinBox, QDoubleSpinBox, QPushButton, QLabel,
                             QMessageBox, QFrame, QSizePolicy)
from PyQt5.QtCore import Qt, pyqtSignal
from database.db_manager import DatabaseManager


class AddSaleScreen(QWidget):
    sale_added = pyqtSignal()

    def __init__(self, partner_inn, partner_name):
        super().__init__()
        self.partner_inn = partner_inn
        self.partner_name = partner_name
        self.db_manager = DatabaseManager()
        self.products_data = []
        self.init_ui()
        self.load_partner_products()

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)

        header_frame = QFrame()
        header_frame.setObjectName("headerFrame")
        header_layout = QHBoxLayout()

        icon_label = QLabel("üí∞")
        icon_label.setObjectName("iconLabel")
        title_label = QLabel("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏")
        title_label.setObjectName("headerTitle")

        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_frame.setLayout(header_layout)

        main_layout.addWidget(header_frame)

        content_frame = QFrame()
        content_frame.setObjectName("contentFrame")
        content_layout = QVBoxLayout()

        form_title = QLabel("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏")
        form_title.setObjectName("formTitle")
        content_layout.addWidget(form_title)

        form_subtitle = QLabel(f"–ü–∞—Ä—Ç–Ω–µ—Ä: {self.partner_name}")
        form_subtitle.setObjectName("formSubtitle")
        content_layout.addWidget(form_subtitle)

        form_layout = QFormLayout()
        form_layout.setVerticalSpacing(25)
        form_layout.setHorizontalSpacing(20)

        self.product_combo = QComboBox()
        self.product_combo.setObjectName("inputField")
        self.product_combo.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.product_combo.currentIndexChanged.connect(self.on_product_changed)
        form_layout.addRow("–ü—Ä–æ–¥—É–∫—Ü–∏—è *", self.product_combo)

        self.quantity_spin = QSpinBox()
        self.quantity_spin.setRange(1, 999999)
        self.quantity_spin.setValue(1)
        self.quantity_spin.setSuffix(" —à—Ç.")
        self.quantity_spin.setObjectName("inputField")
        self.quantity_spin.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.quantity_spin.valueChanged.connect(self.update_total_sum)
        form_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *", self.quantity_spin)

        self.price_spin = QDoubleSpinBox()
        self.price_spin.setRange(0.01, 999999.99)
        self.price_spin.setDecimals(2)
        self.price_spin.setValue(0.00)
        self.price_spin.setSuffix(" ‚ÇΩ")
        self.price_spin.setObjectName("inputField")
        self.price_spin.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.price_spin.valueChanged.connect(self.update_total_sum)
        form_layout.addRow("–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É *", self.price_spin)

        self.total_sum_label = QLabel("0.00 ‚ÇΩ")
        self.total_sum_label.setObjectName("totalSumLabel")
        self.total_sum_label.setStyleSheet("""
            QLabel#totalSumLabel {
                font-size: 16px;
                font-weight: bold;
                color: #606c38;
                background-color: #f4f3ee;
                border: 2px solid #dda15e;
                border-radius: 6px;
                padding: 10px;
                text-align: center;
            }
        """)
        form_layout.addRow("–û–±—â–∞—è —Å—É–º–º–∞:", self.total_sum_label)

        content_layout.addLayout(form_layout)
        content_frame.setLayout(content_layout)
        main_layout.addWidget(content_frame)

        main_layout.addStretch()

        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()

        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.setObjectName("saveBtn")
        self.cancel_btn = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        self.cancel_btn.setObjectName("cancelBtn")

        buttons_layout.addWidget(self.save_btn)
        buttons_layout.addWidget(self.cancel_btn)

        main_layout.addLayout(buttons_layout)
        self.setLayout(main_layout)

        self.save_btn.clicked.connect(self.save_sale)
        self.cancel_btn.clicked.connect(self.close)

    def load_partner_products(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫"""
        try:
            self.products_data = self.db_manager.get_partner_products_for_sale(self.partner_inn)
            self.product_combo.clear()
            self.product_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é", None)

            if not self.products_data:
                self.product_combo.addItem("–£ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏", None)
                self.save_btn.setEnabled(False)
                QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ",
                                    f"–£ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ '{self.partner_name}' –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.\n"
                                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ–¥—É–∫—Ü–∏—è'.")
                return

            for product_id, product_name, min_price in self.products_data:
                try:
                    price_float = float(str(min_price).replace(',', '.'))
                    display_text = f"{product_name} (–º–∏–Ω. —Ü–µ–Ω–∞: {price_float:.2f} ‚ÇΩ)"
                except:
                    display_text = f"{product_name} (—Ü–µ–Ω–∞: {min_price})"

                product_data = {
                    'id': product_id,
                    'name': product_name,
                    'min_price': min_price
                }

                self.product_combo.addItem(display_text, product_data)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é: {str(e)}")

    def on_product_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_data = self.product_combo.currentData()

        if product_data and product_data.get('min_price'):
            try:
                min_price = float(str(product_data['min_price']).replace(',', '.'))
                self.price_spin.setValue(min_price)
            except:
                self.price_spin.setValue(0.00)
        else:
            self.price_spin.setValue(0.00)

        self.update_total_sum()

    def update_total_sum(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â—É—é —Å—É–º–º—É"""
        try:
            quantity = self.quantity_spin.value()
            price = self.price_spin.value()
            total = quantity * price
            self.total_sum_label.setText(f"{total:.2f} ‚ÇΩ")
        except:
            self.total_sum_label.setText("0.00 ‚ÇΩ")

    def save_sale(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É"""
        if not self.validate_fields():
            return

        try:
            product_data = self.product_combo.currentData()
            partner_id = self.db_manager.get_partner_id_by_inn(self.partner_inn)

            if not partner_id:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
                return

            sale_data = {
                'ProductID': product_data['id'],
                'PartnerID': partner_id,
                'Quantity': self.quantity_spin.value()
            }

            if self.db_manager.add_sale(sale_data):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö",
                                        f"–ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                                        f"–ü—Ä–æ–¥—É–∫—Ç: {product_data['name']}\n"
                                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.quantity_spin.value()} —à—Ç.\n"
                                        f"–°—É–º–º–∞: {self.quantity_spin.value() * self.price_spin.value():.2f} ‚ÇΩ")
                self.sale_added.emit()
                self.close()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

    def validate_fields(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã"""
        current_index = self.product_combo.currentIndex()
        product_data = self.product_combo.currentData()

        if current_index <= 0 or not product_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é")
            self.product_combo.setFocus()
            return False

        if not product_data.get('id'):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.product_combo.setFocus()
            return False

        if self.quantity_spin.value() <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0")
            self.quantity_spin.setFocus()
            return False

        if self.price_spin.value() <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –±–æ–ª—å—à–µ 0")
            self.price_spin.setFocus()
            return False

        return True