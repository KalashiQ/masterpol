from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTableWidget,
                             QTableWidgetItem, QLabel, QLineEdit, QMessageBox,
                             QHeaderView, QFrame, QPushButton)
from PyQt5.QtCore import Qt, QTimer
from database.db_manager import DatabaseManager


class PartnerProductsScreen(QWidget):
    def __init__(self, partner_inn, partner_name):
        super().__init__()
        self.partner_inn = partner_inn
        self.partner_name = partner_name
        self.db_manager = DatabaseManager()
        self.search_timer = QTimer()
        self.search_timer.setSingleShot(True)
        self.search_timer.timeout.connect(self.search_products)

        print("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–ö–†–ê–ù–ê –ü–†–û–î–£–ö–¶–ò–ò ===")
        print("partner_inn:", self.partner_inn)
        print("partner_name:", self.partner_name)

        self.init_ui()
        self.load_products()

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = QFrame()
        header_frame.setObjectName("headerFrame")
        header_layout = QHBoxLayout()

        icon_label = QLabel("üì¶")
        icon_label.setObjectName("iconLabel")
        title_label = QLabel("–ü—Ä–æ–¥—É–∫—Ü–∏—è")
        title_label.setObjectName("headerTitle")

        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_frame.setLayout(header_layout)

        main_layout.addWidget(header_frame)

        # –ö–æ–Ω—Ç–µ–Ω—Ç
        content_frame = QFrame()
        content_frame.setObjectName("contentFrame")
        content_layout = QVBoxLayout()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        partner_info = QLabel("–ü–∞—Ä—Ç–Ω–µ—Ä: {} (–ò–ù–ù: {})".format(self.partner_name, self.partner_inn))
        partner_info.setObjectName("partnerInfo")
        content_layout.addWidget(partner_info)

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        search_label = QLabel("–ü–æ–∏—Å–∫:")
        search_label.setObjectName("searchLabel")

        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞...")
        self.search_edit.setObjectName("searchField")
        self.search_edit.textChanged.connect(self.on_search_text_changed)

        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_edit)
        content_layout.addLayout(search_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        self.products_table = QTableWidget()
        self.products_table.setColumnCount(4)
        self.products_table.setHorizontalHeaderLabels([
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–ê—Ä—Ç–∏–∫—É–ª", "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–ú–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        header = self.products_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)

        self.products_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.products_table.setAlternatingRowColors(True)
        self.products_table.setSortingEnabled(True)

        content_layout.addWidget(self.products_table)
        content_frame.setLayout(content_layout)
        main_layout.addWidget(content_frame)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = QFrame()
        buttons_frame.setObjectName("buttonsFrame")
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(10)
        buttons_layout.setContentsMargins(20, 10, 20, 20)

        buttons_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∏
        self.add_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        self.add_btn.setObjectName("addBtn")

        self.edit_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        self.edit_btn.setObjectName("editBtn")

        self.delete_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        self.delete_btn.setObjectName("deleteBtn")

        self.back_btn = QPushButton("–ù–∞–∑–∞–¥")
        self.back_btn.setObjectName("backBtn")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ layout
        buttons_layout.addWidget(self.add_btn)
        buttons_layout.addWidget(self.edit_btn)
        buttons_layout.addWidget(self.delete_btn)
        buttons_layout.addWidget(self.back_btn)

        buttons_frame.setLayout(buttons_layout)
        main_layout.addWidget(buttons_frame)

        self.setLayout(main_layout)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–Ω–æ–ø–æ–∫
        self.add_btn.clicked.connect(self.add_product)
        self.edit_btn.clicked.connect(self.edit_product)
        self.delete_btn.clicked.connect(self.delete_product)
        self.back_btn.clicked.connect(self.close)

    def load_products(self, search_text=""):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        try:
            print("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏...")
            print("partner_inn:", self.partner_inn)
            print("search_text:", search_text)

            # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_partner_products_by_partner_id
            products = self.db_manager.get_partner_products_by_partner_id(self.partner_inn, search_text)

            print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:", len(products))
            self.products_table.setRowCount(len(products))

            for row, product in enumerate(products):
                print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É", row, "–ø—Ä–æ–¥—É–∫—Ç:", product)

                product_name, article_number, product_type, min_price = product

                # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                name_item = QTableWidgetItem(str(product_name) if product_name else "")
                self.products_table.setItem(row, 0, name_item)

                # –ê—Ä—Ç–∏–∫—É–ª
                article_item = QTableWidgetItem(str(article_number) if article_number else "")
                article_item.setTextAlignment(Qt.AlignCenter)
                self.products_table.setItem(row, 1, article_item)

                # –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                type_item = QTableWidgetItem(str(product_type) if product_type else "")
                type_item.setTextAlignment(Qt.AlignCenter)
                self.products_table.setItem(row, 2, type_item)

                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É:", min_price, "—Ç–∏–ø:", type(min_price))
                if min_price is not None:
                    try:
                        if isinstance(min_price, str):
                            min_price_cleaned = min_price.replace(',', '.')
                            min_price = float(min_price_cleaned)
                        else:
                            min_price = float(min_price)

                        price_text = "{:,.2f} ‚ÇΩ".format(min_price)
                        print("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞:", price_text)
                        price_item = QTableWidgetItem(price_text)
                        price_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                    except (ValueError, TypeError) as e:
                        print("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã:", e)
                        price_item = QTableWidgetItem(str(min_price))
                else:
                    price_item = QTableWidgetItem("")
                self.products_table.setItem(row, 3, price_item)

            print("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            print("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ load_products:", str(e))
            import traceback
            traceback.print_exc()
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é: {}".format(str(e)))

    def on_search_text_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        self.search_timer.stop()
        self.search_timer.start(300)

    def search_products(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
        search_text = self.search_edit.text().strip()
        self.load_products(search_text)

    def get_selected_product_article(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        current_row = self.products_table.currentRow()
        if current_row >= 0:
            article_item = self.products_table.item(current_row, 1)
            return article_item.text() if article_item else None
        return None

    def add_product(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
        try:
            print("=== –í–´–ó–û–í –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–†–û–î–£–ö–¢–ê ===")
            print("partner_inn –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:", self.partner_inn)

            from ui.add_product_screen import AddProductScreen

            # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ò–ù–ù –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            self.add_product_window = AddProductScreen(self.partner_inn)
            self.add_product_window.product_added.connect(self.load_products)
            self.add_product_window.setWindowTitle("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
            self.add_product_window.setFixedSize(600, 500)
            self.add_product_window.show()

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", e)
            import traceback
            traceback.print_exc()
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {}".format(str(e)))

    def edit_product(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
        article = self.get_selected_product_article()
        if not article:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        try:
            print("=== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê ===")
            print("–ê—Ä—Ç–∏–∫—É–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", article)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            product_data = self.db_manager.get_product_by_article(article)

            if not product_data:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
                return

            print("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", product_data)

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å EditProductScreen
            from ui.edit_product_screen import EditProductScreen

            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            self.edit_product_window = EditProductScreen(product_data, self.partner_inn)
            self.edit_product_window.product_updated.connect(self.load_products)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.edit_product_window.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
            self.edit_product_window.setFixedSize(600, 500)
            self.edit_product_window.show()

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", e)
            import traceback
            traceback.print_exc()
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

    def get_selected_product_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        current_row = self.products_table.currentRow()
        if current_row >= 0:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                name_item = self.products_table.item(current_row, 0)
                article_item = self.products_table.item(current_row, 1)
                type_item = self.products_table.item(current_row, 2)
                price_item = self.products_table.item(current_row, 3)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                price_text = price_item.text() if price_item else "0"
                price_clean = price_text.replace("‚ÇΩ", "").replace(" ", "").replace(",", ".")

                return {
                    'ProductName': name_item.text() if name_item else "",
                    'ArticleNumber': article_item.text() if article_item else "",
                    'ProductTypeID': type_item.text() if type_item else "",
                    'MinPartnerPrice': price_clean
                }
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:", e)
                return None
        return None

    def delete_product(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
        article = self.get_selected_product_article()
        if not article:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        current_row = self.products_table.currentRow()
        product_name = ""
        if current_row >= 0:
            name_item = self.products_table.item(current_row, 0)
            product_name = name_item.text() if name_item else ""

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:\n\n'{}' (–ê—Ä—Ç–∏–∫—É–ª: {})?".format(product_name, article),
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            try:
                if self.db_manager.delete_product(article):
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                    self.load_products()
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {}".format(str(e)))