from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTableWidget,
                             QTableWidgetItem, QLabel, QLineEdit, QMessageBox,
                             QHeaderView, QFrame, QPushButton)
from PyQt5.QtCore import Qt, QTimer
from database.db_manager import DatabaseManager


class PartnerProductsScreen(QWidget):
    def __init__(self, partner_inn, partner_name):
        super().__init__()
        self.partner_inn = partner_inn
        self.partner_name = partner_name
        self.db_manager = DatabaseManager()
        self.search_timer = QTimer()
        self.search_timer.setSingleShot(True)
        self.search_timer.timeout.connect(self.search_products)
        self.init_ui()
        self.load_products()

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = QFrame()
        header_frame.setObjectName("headerFrame")
        header_layout = QHBoxLayout()

        icon_label = QLabel("üì¶")
        icon_label.setObjectName("iconLabel")
        title_label = QLabel("–ü—Ä–æ–¥—É–∫—Ü–∏—è")
        title_label.setObjectName("headerTitle")

        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        header_frame.setLayout(header_layout)

        main_layout.addWidget(header_frame)

        # –ö–æ–Ω—Ç–µ–Ω—Ç
        content_frame = QFrame()
        content_frame.setObjectName("contentFrame")
        content_layout = QVBoxLayout()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ
        partner_info = QLabel(f"–ü–∞—Ä—Ç–Ω–µ—Ä: {self.partner_name}")
        partner_info.setObjectName("partnerInfo")
        content_layout.addWidget(partner_info)

        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        search_label = QLabel("–ü–æ–∏—Å–∫:")
        search_label.setObjectName("searchLabel")

        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞...")
        self.search_edit.setObjectName("searchField")
        self.search_edit.textChanged.connect(self.on_search_text_changed)

        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_edit)
        content_layout.addLayout(search_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        self.products_table = QTableWidget()
        self.products_table.setColumnCount(4)
        self.products_table.setHorizontalHeaderLabels([
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–ê—Ä—Ç–∏–∫—É–ª", "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏", "–ú–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        header = self.products_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –ê—Ä—Ç–∏–∫—É–ª –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # –¢–∏–ø –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É

        self.products_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.products_table.setAlternatingRowColors(True)
        self.products_table.setSortingEnabled(True)

        content_layout.addWidget(self.products_table)
        content_frame.setLayout(content_layout)
        main_layout.addWidget(content_frame)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = QFrame()
        buttons_frame.setObjectName("buttonsFrame")
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(10)
        buttons_layout.setContentsMargins(20, 10, 20, 20)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É —Å–ª–µ–≤–∞
        buttons_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∏
        self.add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.add_btn.setObjectName("addBtn")

        self.edit_btn = QPushButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
        self.edit_btn.setObjectName("editBtn")

        self.delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        self.delete_btn.setObjectName("deleteBtn")

        self.back_btn = QPushButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        self.back_btn.setObjectName("backBtn")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ layout
        buttons_layout.addWidget(self.add_btn)
        buttons_layout.addWidget(self.edit_btn)
        buttons_layout.addWidget(self.delete_btn)
        buttons_layout.addWidget(self.back_btn)

        buttons_frame.setLayout(buttons_layout)
        main_layout.addWidget(buttons_frame)

        self.setLayout(main_layout)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–Ω–æ–ø–æ–∫
        self.add_btn.clicked.connect(self.add_product)
        self.edit_btn.clicked.connect(self.edit_product)
        self.delete_btn.clicked.connect(self.delete_product)
        self.back_btn.clicked.connect(self.close)

    def load_products(self, search_text=""):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            products = self.db_manager.get_partner_products_by_inn(self.partner_inn, search_text)

            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            if not products:
                products = self.db_manager.get_partner_products("", search_text)

            self.products_table.setRowCount(len(products))

            for row, product in enumerate(products):
                # product —Å–æ–¥–µ—Ä–∂–∏—Ç: (ProductName, ArticleNumber, ProductType, MinPartnerPrice)
                product_name, article_number, product_type, min_price = product

                # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                name_item = QTableWidgetItem(str(product_name) if product_name else "")
                self.products_table.setItem(row, 0, name_item)

                # –ê—Ä—Ç–∏–∫—É–ª
                article_item = QTableWidgetItem(str(article_number) if article_number else "")
                article_item.setTextAlignment(Qt.AlignCenter)
                self.products_table.setItem(row, 1, article_item)

                # –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                type_item = QTableWidgetItem(str(product_type) if product_type else "")
                type_item.setTextAlignment(Qt.AlignCenter)
                self.products_table.setItem(row, 2, type_item)

                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                if min_price is not None:
                    price_text = f"{min_price:,.2f} ‚ÇΩ"
                    price_item = QTableWidgetItem(price_text)
                    price_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                else:
                    price_item = QTableWidgetItem("")
                self.products_table.setItem(row, 3, price_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            count_text = f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}"
            if hasattr(self, 'count_label'):
                self.count_label.setText(count_text)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é: {str(e)}")

    def on_search_text_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        self.search_timer.stop()
        self.search_timer.start(300)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 300–º—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

    def search_products(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏"""
        search_text = self.search_edit.text().strip()
        self.load_products(search_text)

    def get_selected_product_article(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        current_row = self.products_table.currentRow()
        if current_row >= 0:
            article_item = self.products_table.item(current_row, 1)  # –ö–æ–ª–æ–Ω–∫–∞ "–ê—Ä—Ç–∏–∫—É–ª"
            return article_item.text() if article_item else None
        return None

    def add_product(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def edit_product(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
        article = self.get_selected_product_article()
        if not article:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                f"–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{article}' –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def delete_product(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
        article = self.get_selected_product_article()
        if not article:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        current_row = self.products_table.currentRow()
        product_name = ""
        if current_row >= 0:
            name_item = self.products_table.item(current_row, 0)
            product_name = name_item.text() if name_item else ""

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:\n\n'{product_name}' (–ê—Ä—Ç–∏–∫—É–ª: {article})?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            try:
                if self.db_manager.delete_product(article):
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                    self.load_products()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")